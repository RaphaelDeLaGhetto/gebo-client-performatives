'use strict';

/**
 * Test pattern inspired by: daniellmb
 *
 * 2013-11-29
 * https://github.com/daniellmb/angular-test-patterns/blob/master/patterns/directive.md#render-the-expected-output-
 */

describe('Directive: requestControl', function () {

    var CLIENT = 'yanfen@example.com',
        SERVER = 'dan@example.com',
        ACTION = 'friend',
        GEBO = 'https://somegebo.com';

    var element,
        scope,
        compile,
        templateCache,
        request;

    /**
     * This function sets scope variables and
     * compiles the directive passed to it
     *
     * The element returned is to be compared to the
     * element generated by _compileTemplate
     *
     * @param string
     * @param string
     * @param string
     * @param string
     *
     * @return Object
     */
    function _createDirective(sender, receiver, action, gebo, directive) {
        var elm;

        // Setup scope state
        scope.sender = sender;
        scope.receiver = receiver;
        scope.action = action;
        scope.gebo = gebo;

        // Create directive
        elm = compile(directive)(scope);

        // Trigger watchers
        scope.$apply();

        // Return
        return elm;
    }

    /**
     * This function compiles the template at
     * the path provided
     *
     * @param string
     *
     * @return string
     */
    function _compileTemplate(path) {
        var template = templateCache.get(path);
    
        if (!template) {
          return '';
        }

        template = compile(template)(scope);

        var blank = angular.element('<div></div>');
        angular.element(blank).append(template);

        // Trigger watchers
        scope.$apply();
   
        return blank.html();
    }

    /**
     * The Request callback that delivers
     * the new message to the sender
     */
    var _message;
    var _callback = function(message) {
        _message = message;
      }

    beforeEach(module('gebo-client-performatives.requestControl'));

    beforeEach(function() {

        inject(function($rootScope, $compile, $templateCache, Request) {
            scope = $rootScope.$new();
            compile = $compile;
            templateCache = $templateCache;
            request = Request;
        });

        request.setCallback(_callback);
        _message = {};
    });

    it('should have set a callback function', function() {
        request.callback({ some: 'message' });
        expect(_message.some).toEqual('message');
    });

    it('should render the expected request-control output', function() {
        element = _createDirective(CLIENT, SERVER, ACTION, GEBO,
                '<request-control sender="{{sender}}" receiver="{{receiver}}" action="{{action}}" gebo="{{gebo}}">' + 
                '</request-control>');  
        expect(element.html()).toEqual(_compileTemplate('templates/request-control.html'));
    });

    /**
     * request
     */
    describe('request', function() {
        it('should create a \'request action\' message', function() {
            element = _createDirective(CLIENT, SERVER, ACTION, GEBO,
                    '<request-control sender="{{sender}}" receiver="{{receiver}}" action="{{action}}" gebo="{{gebo}}">' + 
                    '</request-control>');  
            var isolateScope = element.scope();
            isolateScope.request();

            expect(_message.sender).toEqual(CLIENT);
            expect(_message.receiver).toEqual(SERVER);
            expect(_message.performative).toEqual('request');
            expect(_message.action).toEqual('friend');
            expect(_message.conversationId).toBe(undefined);
            expect(_message.content).toBe(undefined);
            expect(element.children().prop('disabled')).toBeFalsy();
        });

        it('should be disabled if \'sender\' attribute is not set', function() {
            element = _createDirective(CLIENT, SERVER, ACTION, GEBO,
                    '<request-control receiver="{{receiver}}" action="{{action}}" gebo="{{gebo}}">' + 
                    '</request-control>'); 
            expect(element.children().prop('disabled')).toBeTruthy();
        });

        it('should be disabled if \'receiver\' attribute is not set', function() {
            element = _createDirective(CLIENT, SERVER, ACTION, GEBO,
                    '<request-control sender="{{sender}}" action="{{action}}" gebo="{{gebo}}">' + 
                    '</request-control>'); 
            expect(element.children().prop('disabled')).toBeTruthy();
        });

        it('should be disabled if \'action\' attribute is not set', function() {
            element = _createDirective(CLIENT, SERVER, ACTION, GEBO,
                    '<request-control sender="{{sender}}" receiver="{{receiver}}" gebo="{{gebo}}">' + 
                    '</request-control>'); 
            expect(element.children().prop('disabled')).toBeTruthy();
        });

        it('should be disabled if \'gebo\' attribute is not set', function() {
            element = _createDirective(CLIENT, SERVER, ACTION, GEBO,
                    '<request-control sender="{{sender}}" receiver="{{receiver}}" action="{{action}}">' + 
                    '</request-control>'); 
            expect(element.children().prop('disabled')).toBeTruthy();
        });


    });
});

